"use strict";(self.webpackChunkmomraGisCore=self.webpackChunkmomraGisCore||[]).push([[9979],{89979:(e,t,r)=>{r.r(t),r.d(t,{default:()=>h});var n=r(36663),s=r(81977),i=(r(7753),r(39994),r(7283),r(40266)),a=r(66341),o=r(84238);r(91957);var N=r(5167),u=r(89542),I=r(53736),_=r(29737),T=r(60673),f=r(30261),c=r(34048),l=r(78104),S=r(81399),y=r(53020),A=r(94466),U=r(24951),O=r(8507),E=r(3466),R=r(90940),g=r(76414),p=r(90819),m=r(42964);let d=class extends m.Z{constructor(e){super(e),this.url=null}areasAndLengths(e,t){return async function(e,t,r){const n=(0,o.en)(e),s={...n.query,f:"json",...t.toJSON()},i=(0,o.lA)(s,r);return(0,a.default)(n.path+"/areasAndLengths",i).then((e=>e.data))}(this.url,e,t)}autoComplete(e,t,r){return async function(e,t,r,n){const s=t[0].spatialReference,i=(0,o.en)(e),I={...i.query,f:"json",sr:JSON.stringify(s.toJSON()),polygons:JSON.stringify((0,N.F)(t).geometries),polylines:JSON.stringify((0,N.F)(r).geometries)},_=(0,o.lA)(I,n);return(0,a.default)(i.path+"/autoComplete",_).then((({data:e})=>(e.geometries||[]).map((({rings:e})=>new u.Z({spatialReference:s,rings:e})))))}(this.url,e,t,r)}buffer(e,t){return async function(e,t,r){const n=(0,o.en)(e),s={...n.query,f:"json",...t.toJSON()},i=t.outSpatialReference||t.geometries[0].spatialReference,N=(0,o.lA)(s,r);return(0,a.default)(n.path+"/buffer",N).then((e=>(e.data.geometries||[]).map((({rings:e})=>new u.Z({spatialReference:i,rings:e})))))}(this.url,e,t)}convexHull(e,t){return async function(e,t,r){const n=t[0].spatialReference,s=(0,o.en)(e),i={...s.query,f:"json",sr:JSON.stringify(n.toJSON()),geometries:JSON.stringify((0,N.F)(t))},u=(0,o.lA)(i,r);return(0,a.default)(s.path+"/convexHull",u).then((({data:e})=>(0,I.im)(e.geometry).set({spatialReference:n})))}(this.url,e,t)}cut(e,t,r){return async function(e,t,r,n){const s=(0,o.en)(e),i=t[0].spatialReference,N={...n,query:{...s.query,f:"json",sr:JSON.stringify(i),target:JSON.stringify({geometryType:(0,I.Ji)(t[0]),geometries:t}),cutter:JSON.stringify(r)}},u=await(0,a.default)(s.path+"/cut",N),{cutIndexes:_,geometries:T=[]}=u.data;return{cutIndexes:_,geometries:T.map((e=>{const t=(0,I.im)(e);return t.spatialReference=i,t}))}}(this.url,e,t,r)}densify(e,t){return async function(e,t,r){const n=t.geometries[0].spatialReference,s=(0,o.en)(e),i={...s.query,f:"json",...t.toJSON()},N=(0,o.lA)(i,r);return(0,a.default)(s.path+"/densify",N).then((({data:e})=>(e.geometries||[]).map((e=>(0,I.im)(e).set({spatialReference:n})))))}(this.url,e,t)}difference(e,t,r){return async function(e,t,r,n){const s=t[0].spatialReference,i=(0,o.en)(e);let u={query:{...i.query,f:"json",sr:JSON.stringify(s.toJSON()),geometries:JSON.stringify((0,N.F)(t)),geometry:JSON.stringify({geometryType:(0,I.Ji)(r),geometry:r.toJSON()})}};return n&&(u={...n,...u}),(0,a.default)(i.path+"/difference",u).then((({data:e})=>(e.geometries||[]).map((e=>(0,I.im)(e).set({spatialReference:s})))))}(this.url,e,t,r)}distance(e,t){return async function(e,t,r){const n=(0,o.en)(e),s={...n.query,f:"json",...t.toJSON()},i=(0,o.lA)(s,r);return(0,a.default)(n.path+"/distance",i).then((({data:e})=>e&&e.distance))}(this.url,e,t)}fromGeoCoordinateString(e,t){return async function(e,t,r){const n={};null!=t.sr&&"object"==typeof t.sr?n.sr=t.sr.wkid||JSON.stringify(t.sr):n.sr=t.sr,n.strings=JSON.stringify(t.strings);const s=t.conversionType||"mgrs";n.conversionType=_.s.toJSON(s),n.conversionMode=t.conversionMode;const i=(0,o.en)(e),N={...i.query,f:"json",...n},u=(0,o.lA)(N,r);return(0,a.default)(i.path+"/fromGeoCoordinateString",u).then((({data:e})=>e.coordinates))}(this.url,e,t)}generalize(e,t){return async function(e,t,r){const n=(t=T.Z.from(t)).toJSON(),s=(0,f.G)(t),i=(0,o.en)(e),N={...i.query,f:"json",...s},u=n.geometries[0].spatialReference,_=(0,o.lA)(N,r);return(0,a.default)(i.path+"/generalize",_).then((({data:e})=>(e.geometries||[]).map((e=>(0,I.im)(e).set({spatialReference:u})))))}(this.url,e,t)}intersect(e,t,r){return async function(e,t,r,n){const s=t[0].spatialReference,i=(0,o.en)(e),u={...i.query,f:"json",sr:JSON.stringify(s.toJSON()),geometries:JSON.stringify((0,N.F)(t)),geometry:JSON.stringify({geometryType:(0,I.Ji)(r),geometry:r.toJSON()})},_=(0,o.lA)(u,n);return(0,a.default)(i.path+"/intersect",_).then((({data:e})=>(e.geometries||[]).map((e=>(0,I.im)(e).set({spatialReference:s})))))}(this.url,e,t,r)}labelPoints(e,t){return function(e,t,r){const n=t.map((e=>e.toJSON())),s=t[0].spatialReference,i=(0,o.en)(e),N={...i.query,f:"json",sr:s.wkid?s.wkid:JSON.stringify(s.toJSON()),polygons:JSON.stringify(n)},u=(0,o.lA)(N,r);return(0,a.default)(i.path+"/labelPoints",u).then((({data:e})=>(e.labelPoints||[]).map((e=>(0,I.im)(e).set({spatialReference:s})))))}(this.url,e,t)}lengths(e,t){return async function(e,t,r){t=c.Z.from(t);const n=(0,l.u)(t),s=(0,o.en)(e),i={...s.query,f:"json",...n},N=(0,o.lA)(i,r);return(0,a.default)(s.path+"/lengths",N).then((({data:e})=>e))}(this.url,e,t)}offset(e,t){return async function(e,t,r){t=S.Z.from(t);const n=(0,y.l)(t),s=(0,o.en)(e),i={...s.query,f:"json",...n},N=t.geometries[0].spatialReference,u=(0,o.lA)(i,r);return(0,a.default)(s.path+"/offset",u).then((({data:e})=>(e.geometries||[]).map((e=>(0,I.im)(e).set({spatialReference:N})))))}(this.url,e,t)}project(e,t){return(0,A.i)(this.url,e,t)}relation(e,t){return async function(e,t,r){t=U.Z.from(t);const n=(0,O.c)(t),s=(0,o.en)(e),i={...s.query,f:"json",...n},N=(0,o.lA)(i,r);return(0,a.default)(s.path+"/relation",N).then((({data:e})=>e.relations))}(this.url,e,t)}reshape(e,t,r){return async function(e,t,r,n){const s=t.spatialReference,i=(0,o.en)(e),N={...i.query,f:"json",sr:JSON.stringify(s.toJSON()),target:JSON.stringify({geometryType:(0,I.Ji)(t),geometry:t.toJSON()}),reshaper:JSON.stringify(r.toJSON())},u=(0,o.lA)(N,n);return(0,a.default)(i.path+"/reshape",u).then((({data:e})=>(0,I.im)(e.geometry).set({spatialReference:s})))}(this.url,e,t,r)}simplify(e,t){return async function(e,t,r){const n="string"==typeof e?(0,E.mN)(e):e,s=t[0].spatialReference,i=(0,I.Ji)(t[0]),o={...r,query:{...n.query,f:"json",sr:s.wkid?s.wkid:JSON.stringify(s),geometries:JSON.stringify((0,N.F)(t))}},{data:u}=await(0,a.default)(n.path+"/simplify",o);return(0,N.o)(u.geometries,i,s)}(this.url,e,t)}toGeoCoordinateString(e,t){return async function(e,t,r){const n={};null!=t.sr&&"object"==typeof t.sr?n.sr=t.sr.wkid||JSON.stringify(t.sr):n.sr=t.sr,n.coordinates=JSON.stringify(t.coordinates);const s=t.conversionType||"mgrs";n.conversionType=_.s.toJSON(s),n.conversionMode=t.conversionMode,n.numOfDigits=t.numOfDigits,n.rounding=t.rounding,n.addSpaces=t.addSpaces;const i=(0,o.en)(e),N={...i.query,f:"json",...n},u=(0,o.lA)(N,r);return(0,a.default)(i.path+"/toGeoCoordinateString",u).then((({data:e})=>e.strings))}(this.url,e,t)}trimExtend(e,t){return async function(e,t,r){t=R.Z.from(t);const n=(0,g.n)(t),s=(0,o.en)(e),i={...s.query,f:"json",...n},N=t.sr,u=(0,o.lA)(i,r);return(0,a.default)(s.path+"/trimExtend",u).then((({data:e})=>(e.geometries||[]).map((({paths:e})=>new p.Z({spatialReference:N,paths:e})))))}(this.url,e,t)}union(e,t){return async function(e,t,r){const n=t[0].spatialReference,s=(0,o.en)(e),i={...s.query,f:"json",sr:JSON.stringify(n.toJSON()),geometries:JSON.stringify((0,N.F)(t))},u=(0,o.lA)(i,r);return(0,a.default)(s.path+"/union",u).then((({data:e})=>(0,I.im)(e.geometry).set({spatialReference:n})))}(this.url,e,t)}};d.UNIT_METER=9001,d.UNIT_GERMAN_METER=9031,d.UNIT_FOOT=9002,d.UNIT_SURVEY_FOOT=9003,d.UNIT_CLARKE_FOOT=9005,d.UNIT_FATHOM=9014,d.UNIT_NAUTICAL_MILE=9030,d.UNIT_SURVEY_CHAIN=9033,d.UNIT_SURVEY_LINK=9034,d.UNIT_SURVEY_MILE=9035,d.UNIT_KILOMETER=9036,d.UNIT_CLARKE_YARD=9037,d.UNIT_CLARKE_CHAIN=9038,d.UNIT_CLARKE_LINK=9039,d.UNIT_SEARS_YARD=9040,d.UNIT_SEARS_FOOT=9041,d.UNIT_SEARS_CHAIN=9042,d.UNIT_SEARS_LINK=9043,d.UNIT_BENOIT_1895A_YARD=9050,d.UNIT_BENOIT_1895A_FOOT=9051,d.UNIT_BENOIT_1895A_CHAIN=9052,d.UNIT_BENOIT_1895A_LINK=9053,d.UNIT_BENOIT_1895B_YARD=9060,d.UNIT_BENOIT_1895B_FOOT=9061,d.UNIT_BENOIT_1895B_CHAIN=9062,d.UNIT_BENOIT_1895B_LINK=9063,d.UNIT_INDIAN_FOOT=9080,d.UNIT_INDIAN_1937_FOOT=9081,d.UNIT_INDIAN_1962_FOOT=9082,d.UNIT_INDIAN_1975_FOOT=9083,d.UNIT_INDIAN_YARD=9084,d.UNIT_INDIAN_1937_YARD=9085,d.UNIT_INDIAN_1962_YARD=9086,d.UNIT_INDIAN_1975_YARD=9087,d.UNIT_FOOT_1865=9070,d.UNIT_RADIAN=9101,d.UNIT_DEGREE=9102,d.UNIT_ARCMINUTE=9103,d.UNIT_ARCSECOND=9104,d.UNIT_GRAD=9105,d.UNIT_GON=9106,d.UNIT_MICRORADIAN=9109,d.UNIT_ARCMINUTE_CENTESIMAL=9112,d.UNIT_ARCSECOND_CENTESIMAL=9113,d.UNIT_MIL6400=9114,d.UNIT_BRITISH_1936_FOOT=9095,d.UNIT_GOLDCOAST_FOOT=9094,d.UNIT_INTERNATIONAL_CHAIN=109003,d.UNIT_INTERNATIONAL_LINK=109004,d.UNIT_INTERNATIONAL_YARD=109001,d.UNIT_STATUTE_MILE=9093,d.UNIT_SURVEY_YARD=109002,d.UNIT_50KILOMETER_LENGTH=109030,d.UNIT_150KILOMETER_LENGTH=109031,d.UNIT_DECIMETER=109005,d.UNIT_CENTIMETER=109006,d.UNIT_MILLIMETER=109007,d.UNIT_INTERNATIONAL_INCH=109008,d.UNIT_US_SURVEY_INCH=109009,d.UNIT_INTERNATIONAL_ROD=109010,d.UNIT_US_SURVEY_ROD=109011,d.UNIT_US_NAUTICAL_MILE=109012,d.UNIT_UK_NAUTICAL_MILE=109013,d.UNIT_SQUARE_INCHES="esriSquareInches",d.UNIT_SQUARE_FEET="esriSquareFeet",d.UNIT_SQUARE_YARDS="esriSquareYards",d.UNIT_ACRES="esriAcres",d.UNIT_SQUARE_MILES="esriSquareMiles",d.UNIT_SQUARE_MILLIMETERS="esriSquareMillimeters",d.UNIT_SQUARE_CENTIMETERS="esriSquareCentimeters",d.UNIT_SQUARE_DECIMETERS="esriSquareDecimeters",d.UNIT_SQUARE_METERS="esriSquareMeters",d.UNIT_ARES="esriAres",d.UNIT_HECTARES="esriHectares",d.UNIT_SQUARE_KILOMETERS="esriSquareKilometers",(0,n._)([(0,s.Cb)()],d.prototype,"url",void 0),d=(0,n._)([(0,i.j)("esri.tasks.GeometryService")],d);const h=d}}]);
//# sourceMappingURL=9979.js.map